// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goriyak.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	goriyak.proto

It has these top-level messages:
	Transaction
	TransactionRequest
	Node
	BlockRequest
	Block
	MiningResult
	Status
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// confirm between server
type Transaction struct {
	Name          string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SendNodeId    string                     `protobuf:"bytes,2,opt,name=send_node_id,json=sendNodeId" json:"send_node_id,omitempty"`
	ReceiveNodeId string                     `protobuf:"bytes,3,opt,name=receive_node_id,json=receiveNodeId" json:"receive_node_id,omitempty"`
	Amount        float64                    `protobuf:"fixed64,4,opt,name=amount" json:"amount,omitempty"`
	Status        string                     `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	CreatedAt     *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto1.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Transaction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Transaction) GetSendNodeId() string {
	if m != nil {
		return m.SendNodeId
	}
	return ""
}

func (m *Transaction) GetReceiveNodeId() string {
	if m != nil {
		return m.ReceiveNodeId
	}
	return ""
}

func (m *Transaction) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Transaction) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// post from client to server
type TransactionRequest struct {
	NodeName      string                     `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	Password      string                     `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Name          string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SendNodeId    string                     `protobuf:"bytes,4,opt,name=send_node_id,json=sendNodeId" json:"send_node_id,omitempty"`
	ReceiveNodeId string                     `protobuf:"bytes,5,opt,name=receive_node_id,json=receiveNodeId" json:"receive_node_id,omitempty"`
	Amount        float64                    `protobuf:"fixed64,6,opt,name=amount" json:"amount,omitempty"`
	CreatedAt     *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto1.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransactionRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *TransactionRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TransactionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransactionRequest) GetSendNodeId() string {
	if m != nil {
		return m.SendNodeId
	}
	return ""
}

func (m *TransactionRequest) GetReceiveNodeId() string {
	if m != nil {
		return m.ReceiveNodeId
	}
	return ""
}

func (m *TransactionRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionRequest) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// for confirm node
type Node struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// request for start mining
type BlockRequest struct {
}

func (m *BlockRequest) Reset()                    { *m = BlockRequest{} }
func (m *BlockRequest) String() string            { return proto1.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()               {}
func (*BlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// for mining
type Block struct {
	Id           string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Transactions []*Block_Transaction       `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	StartedAt    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	FinishedAt   *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=finished_at,json=finishedAt" json:"finished_at,omitempty"`
	Sign         []string                   `protobuf:"bytes,5,rep,name=sign" json:"sign,omitempty"`
	PreviousHash string                     `protobuf:"bytes,6,opt,name=previous_hash,json=previousHash" json:"previous_hash,omitempty"`
	Nonce        string                     `protobuf:"bytes,7,opt,name=nonce" json:"nonce,omitempty"`
	CreatedAt    *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Difficulty   string                     `protobuf:"bytes,9,opt,name=difficulty" json:"difficulty,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto1.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Block) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block) GetTransactions() []*Block_Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetStartedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Block) GetFinishedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *Block) GetSign() []string {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Block) GetPreviousHash() string {
	if m != nil {
		return m.PreviousHash
	}
	return ""
}

func (m *Block) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Block) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Block) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

type Block_Transaction struct {
	Id            string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SendNodeId    string                     `protobuf:"bytes,2,opt,name=send_node_id,json=sendNodeId" json:"send_node_id,omitempty"`
	ReceiveNodeId string                     `protobuf:"bytes,3,opt,name=receive_node_id,json=receiveNodeId" json:"receive_node_id,omitempty"`
	Amount        float64                    `protobuf:"fixed64,4,opt,name=amount" json:"amount,omitempty"`
	CreatedAt     *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Block_Transaction) Reset()                    { *m = Block_Transaction{} }
func (m *Block_Transaction) String() string            { return proto1.CompactTextString(m) }
func (*Block_Transaction) ProtoMessage()               {}
func (*Block_Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *Block_Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block_Transaction) GetSendNodeId() string {
	if m != nil {
		return m.SendNodeId
	}
	return ""
}

func (m *Block_Transaction) GetReceiveNodeId() string {
	if m != nil {
		return m.ReceiveNodeId
	}
	return ""
}

func (m *Block_Transaction) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Block_Transaction) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// post from client to server
type MiningResult struct {
	BlockId int64  `protobuf:"varint,1,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	Hash    string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	Nonce   string `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *MiningResult) Reset()                    { *m = MiningResult{} }
func (m *MiningResult) String() string            { return proto1.CompactTextString(m) }
func (*MiningResult) ProtoMessage()               {}
func (*MiningResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MiningResult) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *MiningResult) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MiningResult) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *MiningResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// uses only in response
type Status struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto1.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*Transaction)(nil), "proto.Transaction")
	proto1.RegisterType((*TransactionRequest)(nil), "proto.TransactionRequest")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*BlockRequest)(nil), "proto.BlockRequest")
	proto1.RegisterType((*Block)(nil), "proto.Block")
	proto1.RegisterType((*Block_Transaction)(nil), "proto.Block.Transaction")
	proto1.RegisterType((*MiningResult)(nil), "proto.MiningResult")
	proto1.RegisterType((*Status)(nil), "proto.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Goriyak service

type GoriyakClient interface {
	RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Status, error)
	DeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Status, error)
	Login(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Status, error)
	PostTransactionFromClient(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*Status, error)
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error)
	PostMiningResult(ctx context.Context, in *MiningResult, opts ...grpc.CallOption) (*Status, error)
}

type goriyakClient struct {
	cc *grpc.ClientConn
}

func NewGoriyakClient(cc *grpc.ClientConn) GoriyakClient {
	return &goriyakClient{cc}
}

func (c *goriyakClient) RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Goriyak/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goriyakClient) DeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Goriyak/DeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goriyakClient) Login(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Goriyak/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goriyakClient) PostTransactionFromClient(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Goriyak/PostTransactionFromClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goriyakClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/proto.Goriyak/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goriyakClient) PostMiningResult(ctx context.Context, in *MiningResult, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Goriyak/PostMiningResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Goriyak service

type GoriyakServer interface {
	RegisterNode(context.Context, *Node) (*Status, error)
	DeleteNode(context.Context, *Node) (*Status, error)
	Login(context.Context, *Node) (*Status, error)
	PostTransactionFromClient(context.Context, *TransactionRequest) (*Status, error)
	GetBlock(context.Context, *BlockRequest) (*Block, error)
	PostMiningResult(context.Context, *MiningResult) (*Status, error)
}

func RegisterGoriyakServer(s *grpc.Server, srv GoriyakServer) {
	s.RegisterService(&_Goriyak_serviceDesc, srv)
}

func _Goriyak_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoriyakServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Goriyak/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoriyakServer).RegisterNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goriyak_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoriyakServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Goriyak/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoriyakServer).DeleteNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goriyak_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoriyakServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Goriyak/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoriyakServer).Login(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goriyak_PostTransactionFromClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoriyakServer).PostTransactionFromClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Goriyak/PostTransactionFromClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoriyakServer).PostTransactionFromClient(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goriyak_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoriyakServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Goriyak/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoriyakServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goriyak_PostMiningResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiningResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoriyakServer).PostMiningResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Goriyak/PostMiningResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoriyakServer).PostMiningResult(ctx, req.(*MiningResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _Goriyak_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Goriyak",
	HandlerType: (*GoriyakServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Goriyak_RegisterNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Goriyak_DeleteNode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Goriyak_Login_Handler,
		},
		{
			MethodName: "PostTransactionFromClient",
			Handler:    _Goriyak_PostTransactionFromClient_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Goriyak_GetBlock_Handler,
		},
		{
			MethodName: "PostMiningResult",
			Handler:    _Goriyak_PostMiningResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goriyak.proto",
}

// Client API for Admin service

type AdminClient interface {
	PostBlock(ctx context.Context, in *MiningResult, opts ...grpc.CallOption) (*Status, error)
	PostTransactionFromServer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Status, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) PostBlock(ctx context.Context, in *MiningResult, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Admin/PostBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) PostTransactionFromServer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/proto.Admin/PostTransactionFromServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	PostBlock(context.Context, *MiningResult) (*Status, error)
	PostTransactionFromServer(context.Context, *Transaction) (*Status, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_PostBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiningResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PostBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Admin/PostBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PostBlock(ctx, req.(*MiningResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_PostTransactionFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PostTransactionFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Admin/PostTransactionFromServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PostTransactionFromServer(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostBlock",
			Handler:    _Admin_PostBlock_Handler,
		},
		{
			MethodName: "PostTransactionFromServer",
			Handler:    _Admin_PostTransactionFromServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goriyak.proto",
}

func init() { proto1.RegisterFile("goriyak.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x6d, 0x62, 0x3b, 0x89, 0x27, 0x4e, 0xbf, 0x4f, 0x0b, 0x42, 0x6e, 0x90, 0x20, 0x32, 0x02,
	0x45, 0x08, 0xa5, 0x22, 0x48, 0x08, 0x04, 0x07, 0x02, 0x88, 0x52, 0x09, 0x2a, 0xe4, 0xf6, 0x1e,
	0x6d, 0xe3, 0x89, 0xb3, 0x6a, 0xbc, 0x1b, 0xbc, 0xeb, 0xa2, 0x4a, 0xfc, 0x2c, 0x4e, 0x1c, 0xf8,
	0x19, 0xfc, 0x1c, 0x84, 0xbc, 0x5e, 0x37, 0x4e, 0x53, 0xa5, 0xed, 0x81, 0x53, 0xfc, 0x26, 0x6f,
	0x66, 0xf7, 0xbd, 0x99, 0x59, 0xe8, 0xc4, 0x22, 0x65, 0x67, 0xf4, 0x64, 0xb0, 0x48, 0x85, 0x12,
	0xc4, 0xd1, 0x3f, 0xdd, 0xfb, 0xb1, 0x10, 0xf1, 0x1c, 0x77, 0x35, 0x3a, 0xce, 0xa6, 0xbb, 0x8a,
	0x25, 0x28, 0x15, 0x4d, 0x16, 0x05, 0x2f, 0xf8, 0x5d, 0x83, 0xf6, 0x51, 0x4a, 0xb9, 0xa4, 0x13,
	0xc5, 0x04, 0x27, 0x04, 0x6c, 0x4e, 0x13, 0xf4, 0x6b, 0xbd, 0x5a, 0xdf, 0x0d, 0xf5, 0x37, 0xe9,
	0x81, 0x27, 0x91, 0x47, 0x63, 0x2e, 0x22, 0x1c, 0xb3, 0xc8, 0xaf, 0xeb, 0xff, 0x20, 0x8f, 0x1d,
	0x88, 0x08, 0xf7, 0x23, 0xf2, 0x08, 0xfe, 0x4b, 0x71, 0x82, 0xec, 0x14, 0xcf, 0x49, 0x96, 0x26,
	0x75, 0x4c, 0xd8, 0xf0, 0xee, 0x40, 0x83, 0x26, 0x22, 0xe3, 0xca, 0xb7, 0x7b, 0xb5, 0x7e, 0x2d,
	0x34, 0x28, 0x8f, 0x4b, 0x45, 0x55, 0x26, 0x7d, 0x47, 0xa7, 0x19, 0x44, 0x5e, 0x02, 0x4c, 0x52,
	0xa4, 0x0a, 0xa3, 0x31, 0x55, 0x7e, 0xa3, 0x57, 0xeb, 0xb7, 0x87, 0xdd, 0x41, 0xa1, 0x69, 0x50,
	0x6a, 0x1a, 0x1c, 0x95, 0x9a, 0x42, 0xd7, 0xb0, 0x47, 0x2a, 0xf8, 0x53, 0x03, 0x52, 0x11, 0x16,
	0xe2, 0xd7, 0x0c, 0xa5, 0x22, 0x77, 0xc1, 0xd5, 0x37, 0xac, 0x88, 0x6c, 0xe5, 0x81, 0x83, 0x5c,
	0x68, 0x17, 0x5a, 0x0b, 0x2a, 0xe5, 0x37, 0x91, 0x96, 0x22, 0xcf, 0xf1, 0xb9, 0x31, 0xd6, 0x06,
	0x63, 0xec, 0xeb, 0x18, 0xe3, 0x6c, 0x36, 0xa6, 0xb1, 0x62, 0xcc, 0xaa, 0x01, 0xcd, 0x9b, 0x18,
	0xf0, 0x1c, 0xec, 0xbc, 0xf8, 0xa5, 0x1d, 0xdd, 0x20, 0x34, 0xd8, 0x06, 0xef, 0xed, 0x5c, 0x4c,
	0x4e, 0x8c, 0x63, 0xc1, 0x0f, 0x1b, 0x1c, 0x1d, 0x20, 0xdb, 0x50, 0x67, 0x91, 0xa9, 0x53, 0x67,
	0x11, 0x79, 0x0d, 0x9e, 0x5a, 0x3a, 0x2c, 0xfd, 0x7a, 0xcf, 0xea, 0xb7, 0x87, 0x7e, 0x71, 0xaf,
	0x81, 0xce, 0x19, 0x54, 0x5b, 0xb0, 0xc2, 0xce, 0xa5, 0x49, 0x45, 0x53, 0x23, 0xcd, 0xba, 0x5a,
	0x9a, 0x61, 0x8f, 0x14, 0x79, 0x05, 0xed, 0x29, 0xe3, 0x4c, 0xce, 0x8a, 0x5c, 0xfb, 0xca, 0x5c,
	0x28, 0xe9, 0x23, 0x95, 0xfb, 0x21, 0x59, 0xcc, 0x7d, 0xa7, 0x67, 0xe5, 0x7e, 0xe4, 0xdf, 0xe4,
	0x01, 0x74, 0x16, 0x29, 0x9e, 0x32, 0x91, 0xc9, 0xf1, 0x8c, 0xca, 0x99, 0xee, 0x82, 0x1b, 0x7a,
	0x65, 0xf0, 0x23, 0x95, 0x33, 0x72, 0x1b, 0x1c, 0x2e, 0xf8, 0x04, 0x75, 0x1b, 0xdc, 0xb0, 0x00,
	0x17, 0x3a, 0xd4, 0xba, 0x41, 0x87, 0xc8, 0x3d, 0x80, 0x88, 0x4d, 0xa7, 0x6c, 0x92, 0xcd, 0xd5,
	0x99, 0xef, 0x16, 0xc3, 0xb3, 0x8c, 0x74, 0x7f, 0x5e, 0xd8, 0xcd, 0x8b, 0xfe, 0xff, 0xfb, 0xbd,
	0x5c, 0x15, 0xe7, 0xdc, 0x64, 0xfc, 0x62, 0xf0, 0x3e, 0x33, 0xce, 0x78, 0x1c, 0xa2, 0xcc, 0xe6,
	0x8a, 0xec, 0x40, 0xeb, 0x38, 0x9f, 0x88, 0xb1, 0x91, 0x60, 0x85, 0x4d, 0x8d, 0xf7, 0xf5, 0x6a,
	0x69, 0xd3, 0x8b, 0xfb, 0xeb, 0xef, 0xa5, 0xd9, 0x56, 0xd5, 0xec, 0x72, 0x96, 0xed, 0xe5, 0x2c,
	0x07, 0x01, 0x34, 0x0e, 0x8b, 0xd7, 0xc2, 0x87, 0x66, 0x82, 0x52, 0xd2, 0xb8, 0x1c, 0xf6, 0x12,
	0x0e, 0x7f, 0xd5, 0xa1, 0xb9, 0x57, 0xbc, 0x8f, 0xe4, 0x09, 0x78, 0x21, 0xc6, 0x4c, 0x2a, 0x4c,
	0xf5, 0x7e, 0xb4, 0xcd, 0xbc, 0xe6, 0xa0, 0xdb, 0x31, 0xa0, 0xa8, 0x18, 0x6c, 0x91, 0xc7, 0x00,
	0xef, 0x71, 0x8e, 0x0a, 0xaf, 0xc1, 0x7d, 0x08, 0xce, 0x27, 0x11, 0x33, 0x7e, 0x05, 0x6d, 0x0f,
	0x76, 0xbe, 0x08, 0xa9, 0x2a, 0x9d, 0xfd, 0x90, 0x8a, 0xe4, 0xdd, 0x9c, 0x21, 0x57, 0x64, 0xc7,
	0xb0, 0xd7, 0x9f, 0xae, 0xf5, 0x42, 0xbb, 0xd0, 0xda, 0x43, 0x55, 0xec, 0xe6, 0xad, 0xea, 0xd6,
	0x95, 0x19, 0x5e, 0x35, 0x18, 0x6c, 0x91, 0x17, 0xf0, 0x7f, 0x7e, 0xf2, 0x4a, 0x5f, 0xca, 0xc4,
	0x6a, 0x70, 0xed, 0xa8, 0xe1, 0x77, 0x70, 0x46, 0x51, 0xc2, 0x38, 0x79, 0x0a, 0x6e, 0x5e, 0x62,
	0xf5, 0xd0, 0x8d, 0xb9, 0xe4, 0xcd, 0xa5, 0x7a, 0x0f, 0x31, 0x3d, 0xc5, 0x94, 0x90, 0x75, 0xbd,
	0x6b, 0x15, 0x8e, 0x1b, 0x1a, 0x3f, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x14, 0x87, 0x62, 0x71,
	0xe4, 0x06, 0x00, 0x00,
}
